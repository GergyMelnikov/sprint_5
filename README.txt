Тесты:
    
    1. account_profile: проверка кнопки перехода в профиль. Cначала происходит авторизация, 
       затем ожидание загрузки кнопки для перехода в личный кабинет, затем нажимается кнопка, 
       затем сравнение урла, если результат ожидаемый, в консоль ничего не пишется, 
       если урл не совпадает с ожидаемым - AssertionError

    2. constructor_transitions_to_sections: проверка переходов между разделами конструктора. 
       Сначала открывается страница с конструктором, затем с ожиданием появления элемента меню - клик на элемент, 
       при переходе в класс элемента добавляется `noselect`, 
       проверка работоспособности переходов построена на наличии этого `noselect`
    
    3. exit_from_profile: проверка кнопки выхода из профиля. Сначала происходит авторизация, 
       затем переход в личный кабинет, затем нажатие на кнопку выхода, 
       если попали на страницу `.../login` - все хорошо

    4. go_to_constructor_from_profile: проверка перехода в конструктор по нажатию на конструктор и логотип.
       Сначала авторизация, затем переход в личный кабинет, затем переход в конструктор по ярлыку,
       потом обратно в личный кабинет, потом переход в конструктор по логотипу

    5. registration_short_password_error: проверка ошибки при вводе короткого пароля.
       Открывается страница регистрации, вводится сгенерированный пароль, короче 6 символов
       Проверяется наличие элемента с текстом ошибки на странице

    6. registration_success: проверка успешной регистрации и что поле имя не пустое.
       Сначала открывается форма регистрации, в нее пишется сгенерированные почта, пароль и имя,
       имя берется из почты, дальше проверяем что находимся в форме авторизации, происходит авторизация с теме же данными,
       переход в личный кабинет, сравнивается введенное имя и текст из поля "Имя" в личном кабинете

    7. sign_in_from_password_recovery: проверка входа из формы восстановления пароля.
       Открываем форму восстановления пароля, находим ссылку "Вход", переходим по этой ссылке в форму авторизации,
       авторизовываемся, сравниваем урл
       Аккаунт для тестирования авторизации здесь и дальше: `Account_for_sign_in_testing@yaya.ru`:`123123`
    
    8. sign_in_from_registration: проверка входа из формы регистрации.
       Открываем форму регистрации, находим ссылку "Вход", переходим по этой ссылке в форму авторизации,
       авторизовываемся, сравниваем урл

    9. sign_in_main: проверка входа c главной страницы.
       Открываем главную страницу, находим кнопку для входа, переходим по этой кнопке в форму авторизации,
       авторизовываемся, сравниваем урл
    
    10. sign_in_personal_account_button: проверка входа по кнопке личный кабинет.
       Открываем главную страницу, находим кнопку личный кабинет в хедере, 
       переходим по этой кнопке в форму авторизации, авторизовываемся, сравниваем урл


Локаторы расположены в файле locators/locators.py


Генератор адреса электронной почты и пароля находися в файле generators/email_and_password_generators.py
    
    Генератор почты:
        функция `generate_email()` - генерирует адрес электронной почты в формате `имя_фамилия_цифры@домен`
        имя генирируется из случайного набора букв длинной 4-8 символов
        фамилия генерируется из случайного набора букв длинной 3-8 символов
        случайные цифры - случайное число от 0, до 999
        домен - выбирает случайный домен из списка указанных в функции
    
    Генератор пароля:
        функция `generate_password()`
        для вызова функции необходимо ввести один числовой атрибут, например generate_password(111)
        в таком случае будет сгенерирован случайный набор из букв, цифр и символов длинной 111 символов
        